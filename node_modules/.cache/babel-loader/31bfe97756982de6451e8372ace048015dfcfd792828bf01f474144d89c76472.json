{"ast":null,"code":"var _jsxFileName = \"/Users/aaryanpatel/Documents/ComputerScience/STUCO-Attendance/src/QRCodeGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Html5Qrcode } from 'html5-qrcode';\nimport { doc, updateDoc, arrayUnion } from 'firebase/firestore';\nimport { auth, db } from './firebase';\nimport './QRScanner.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QRScanner = () => {\n  _s();\n  const scannerRef = useRef(null);\n  const [status, setStatus] = useState('Initializing...');\n  const [scannedCode, setScannedCode] = useState(null);\n  const [isScanning, setIsScanning] = useState(false); // Track scanning state\n  const meetingCode = 'stuco-meeting-5-11'; // The QR code value to match\n\n  useEffect(() => {\n    const html5QrCode = new Html5Qrcode(\"reader\");\n\n    // Detect available cameras and start scanning from the first one\n    Html5Qrcode.getCameras().then(devices => {\n      if (devices && devices.length) {\n        const cameraId = devices[0].id;\n        html5QrCode.start(cameraId, {\n          fps: 10,\n          // frames per second\n          qrbox: {\n            width: 250,\n            height: 250\n          } // QR scanning box size\n        }, async (decodedText, decodedResult) => {\n          setScannedCode(decodedText);\n          setStatus(`Scanned: ${decodedText}`);\n\n          // Stop the scanner once a code is detected\n          if (isScanning) {\n            await html5QrCode.stop(); // Stop scanning only if it's actively scanning\n            setIsScanning(false);\n          }\n\n          // Check if the QR code matches the meeting code\n          if (decodedText === meetingCode) {\n            const user = auth.currentUser;\n            if (user) {\n              const username = user.email.split('@')[0];\n\n              // Mark attendance in Firestore\n              await updateDoc(doc(db, 'users', username), {\n                attendance: arrayUnion({\n                  meeting: meetingCode,\n                  timestamp: new Date().toISOString()\n                })\n              });\n              setStatus(\"✅ Attendance marked successfully.\");\n            } else {\n              setStatus(\"❌ User not logged in.\");\n            }\n          } else {\n            setStatus(\"❌ Invalid QR code.\");\n          }\n        }, error => {\n          console.error(\"QR Code error\", error);\n          setStatus(\"❌ Error scanning the code.\");\n        }).then(() => {\n          setIsScanning(true); // Mark that the scanner is active\n        }).catch(err => {\n          console.error(\"Failed to start QR scanner\", err);\n          setStatus(\"❌ Failed to access camera.\");\n        });\n      }\n    });\n\n    // Cleanup the scanner when the component unmounts\n    return () => {\n      if (isScanning) {\n        html5QrCode.stop().catch(() => {}); // Make sure to stop scanning on cleanup\n      }\n    };\n  }, [isScanning]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scanner-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Scan Meeting QR Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"reader\",\n      style: {\n        width: '300px',\n        margin: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), scannedCode && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Scanned Code: \", scannedCode]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(QRScanner, \"7qHyuwKpjLjICliDNdtUT/l5yBE=\");\n_c = QRScanner;\nexport default QRScanner;\nvar _c;\n$RefreshReg$(_c, \"QRScanner\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Html5Qrcode","doc","updateDoc","arrayUnion","auth","db","jsxDEV","_jsxDEV","QRScanner","_s","scannerRef","status","setStatus","scannedCode","setScannedCode","isScanning","setIsScanning","meetingCode","html5QrCode","getCameras","then","devices","length","cameraId","id","start","fps","qrbox","width","height","decodedText","decodedResult","stop","user","currentUser","username","email","split","attendance","meeting","timestamp","Date","toISOString","error","console","catch","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","margin","_c","$RefreshReg$"],"sources":["/Users/aaryanpatel/Documents/ComputerScience/STUCO-Attendance/src/QRCodeGenerator.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Html5Qrcode } from 'html5-qrcode';\nimport { doc, updateDoc, arrayUnion } from 'firebase/firestore';\nimport { auth, db } from './firebase';\nimport './QRScanner.css';\n\nconst QRScanner = () => {\n    const scannerRef = useRef(null);\n    const [status, setStatus] = useState('Initializing...');\n    const [scannedCode, setScannedCode] = useState(null);\n    const [isScanning, setIsScanning] = useState(false);  // Track scanning state\n    const meetingCode = 'stuco-meeting-5-11'; // The QR code value to match\n\n    useEffect(() => {\n        const html5QrCode = new Html5Qrcode(\"reader\");\n\n        // Detect available cameras and start scanning from the first one\n        Html5Qrcode.getCameras().then((devices) => {\n            if (devices && devices.length) {\n                const cameraId = devices[0].id;\n\n                html5QrCode.start(\n                    cameraId,\n                    {\n                        fps: 10, // frames per second\n                        qrbox: { width: 250, height: 250 }, // QR scanning box size\n                    },\n                    async (decodedText, decodedResult) => {\n                        setScannedCode(decodedText);\n                        setStatus(`Scanned: ${decodedText}`);\n\n                        // Stop the scanner once a code is detected\n                        if (isScanning) {\n                            await html5QrCode.stop();  // Stop scanning only if it's actively scanning\n                            setIsScanning(false);\n                        }\n\n                        // Check if the QR code matches the meeting code\n                        if (decodedText === meetingCode) {\n                            const user = auth.currentUser;\n                            if (user) {\n                                const username = user.email.split('@')[0];\n\n                                // Mark attendance in Firestore\n                                await updateDoc(doc(db, 'users', username), {\n                                    attendance: arrayUnion({\n                                        meeting: meetingCode,\n                                        timestamp: new Date().toISOString(),\n                                    }),\n                                });\n\n                                setStatus(\"✅ Attendance marked successfully.\");\n                            } else {\n                                setStatus(\"❌ User not logged in.\");\n                            }\n                        } else {\n                            setStatus(\"❌ Invalid QR code.\");\n                        }\n                    },\n                    (error) => {\n                        console.error(\"QR Code error\", error);\n                        setStatus(\"❌ Error scanning the code.\");\n                    }\n                ).then(() => {\n                    setIsScanning(true);  // Mark that the scanner is active\n                }).catch((err) => {\n                    console.error(\"Failed to start QR scanner\", err);\n                    setStatus(\"❌ Failed to access camera.\");\n                });\n            }\n        });\n\n        // Cleanup the scanner when the component unmounts\n        return () => {\n            if (isScanning) {\n                html5QrCode.stop().catch(() => {}); // Make sure to stop scanning on cleanup\n            }\n        };\n    }, [isScanning]);\n\n    return (\n        <div className=\"scanner-container\">\n            <h2>Scan Meeting QR Code</h2>\n            <div id=\"reader\" style={{ width: '300px', margin: 'auto' }}></div>\n            <p>{status}</p>\n            {scannedCode && <p>Scanned Code: {scannedCode}</p>}\n        </div>\n    );\n};\n\nexport default QRScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}